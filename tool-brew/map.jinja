{#- get dict of user configurations -#}
{%- set brew = salt['pillar.get']('tool:brew', {'users': {}}, merge=True) -%}
{%- set users = {} -%}

{%- set console_user = salt['cmd.run_stdout']('id -n -u $(stat -f "%u" /dev/console)', python_shell=True) %}
{%- set m1 = 'Apple' in grains['cpu_model'] %}

{%- if brew.get('prefix') %}
  {%- set prefix, target = (brew.prefix, brew.get('repodir', '')) %}
{%- else %}
  {%- if m1 %}
    {%- set prefix, target = ('/opt/homebrew', '') %}
  {%- else %}
    {%- set prefix, target = ('/usr/local', '/Homebrew') %}
  {%- endif %}
{%- endif %}

{%- do brew.update({
  '_user': brew.get('user', console_user),
  '_prefix': prefix,
  '_target': prefix ~ target,
  '_m1': m1,
}) %}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in salt['pillar.get']('tool:users', {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get('brew', True) -%}
    {%- do users.update({tool_user: tool_user_conf}) -%}
  {%- endif -%}
{%- endfor -%}

{%- do salt['defaults.merge'](users, brew.get('users', {})) -%}

{#- update all user configuration for brew with its defaults -#}
{%- do salt['defaults.update'](users, {'brew': brew.get('defaults', {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({'_brew': {}}) -%}
  {%- do users[user].update({'name': user}) -%}
  {%- set user_info = salt['user.info'](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt['user.primary_group'](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split('/')[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt['defaults.merge'](user_info, users[user], in_place=False)) -%}

  {%- if users[user].xdg | default('True') -%}
    {#- cannot use environ.get because it only has access to current env, not a specific user's -#}
    {%- load_yaml as xdg -%}
cache: {{ salt['cmd.run']('[ -n "$XDG_CACHE_HOME" ] && echo "${XDG_CACHE_HOME}" || echo "${HOME}/.cache"', runas=user) }}
config: {{ salt['cmd.run']('[ -n "$XDG_CONFIG_HOME" ] && echo "${XDG_CONFIG_HOME}" || echo "${HOME}/.config"', runas=user) }}
data: {{ salt['cmd.run']('[ -n "$XDG_DATA_HOME" ] && echo "${XDG_DATA_HOME}" || echo "${HOME}/.local/share"', runas=user) }}
state: {{ salt['cmd.run']('[ -n "$XDG_STATE_HOME" ] && echo "${XDG_STATE_HOME}" || echo "${HOME}/.local/state"', runas=user) }}
    {%- endload -%}
    {%- do users[user].update({'xdg': xdg}) -%}
    {%- do users[user]['_brew'].update({'confdir': xdg.config ~ '/brew'}) -%}
  {%- else -%}
    {%- do users[user]['_brew'].update({'confdir': users[user].home}) -%}
  {%- endif -%}
  {#- or
  {%- do users[user]['_brew'].update({'confdir': user_info.home + default_confdir}) -%}
  -#}
{%- endfor -%}

{%- do brew.update({'users': users.values() | list}) -%}
