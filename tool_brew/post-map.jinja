{#- -*- coding: utf-8 -*- #}
{#- vim: ft=jinja #}

{#- very ugly workaround for Salt only running under Rosetta currently #}
{%- if mapdata.lookup.m1
    and 'x86_64' == grains.cpuarch
    and '/usr/local' == mapdata.lookup.prefix
%}
    {%- do mapdata.lookup.update({
        'gnupath': '/opt/gnubin' if mapdata.lookup.gnupath == '/usr/local/gnubin' else mapdata.lookup.gnupath,
        'prefix': '/opt/homebrew',
        'repodir': ''
    }) %}
{%- endif %}

{%- set parsed_taps = [] %}

{%- for tap in mapdata | traverse('taps:wanted', []) %}
  {%- set tap_name = tap if tap is string else tap | first %}
  {%- set tap_remote = tap[tap_name] if tap is mapping else '' %}
  {%- set autoupdate = false %}
  {%- if tap_remote %}
    {%- set autoupdate =
          mapdata | traverse('taps:autoupdate:default', false) | to_bool or
          (tap_name in mapdata | traverse('taps:autoupdate') and mapdata.taps.autoupdate[tap_name]) or
          tap_name in mapdata.lookup.official_taps
    %}
  {%- endif %}
  {%- do parsed_taps.append({
    'name': tap_name,
    'remote': tap_remote,
    'autoupdate': autoupdate,
  }) %}
{%- endfor %}

{%- set env_vars = [
      ('HOMEBREW_PREFIX', mapdata.lookup.prefix),
      ('HOMEBREW_CELLAR', mapdata.lookup.prefix | path_join(mapdata.lookup.repodir, 'Cellar')),
      ('HOMEBREW_REPOSITORY', mapdata.lookup.prefix | path_join(mapdata.lookup.repodir)),
] %}

{%- if mapdata.lookup.brew_mirror != 'https://github.com/Homebrew/brew.git' %}
  {%- do env_vars.append(('HOMEBREW_BREW_GIT_REMOTE', mapdata.lookup.brew_mirror)) %}
{%- endif %}

{%- if mapdata.lookup.core_mirror != 'https://github.com/Homebrew/homebrew-core.git' %}
  {%- do env_vars.append(('HOMEBREW_CORE_GIT_REMOTE', mapdata.lookup.core_mirror)) %}
{%- endif %}

{%- for var in mapdata.get('config', []) %}
  {%- if var is string %}
    {%- set parsed = (var, '1') %}
  {%- else %}
    {%- set parsed = (var | first, ' '.join(var.values() | first)) %}
  {%- endif %}
  {%- do env_vars.append(parsed) %}
{%- endfor %}

{%- do mapdata.update({'_taps': parsed_taps, '_vars': env_vars}) %}

{%- set users = {} -%}

{%- set user_settings = ['xdg', 'completions', 'dotconfig', 'persistenv', 'rchook', 'completions', 'brew'] -%}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in mapdata.get('users', {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get('brew', true) -%}
    {%- do users.update({tool_user: {'brew': {}}}) -%}
    {%- for user_setting in user_settings -%}
      {%- if tool_user_conf.get(user_setting) is not equalto None -%}
        {%- do users[tool_user].update({user_setting: salt['defaults.deepcopy'](tool_user_conf[user_setting])}) -%}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}

{#- update all users' configurations for this formula with the formula defaults -#}
{%- do salt['defaults.update'](users, {'brew': mapdata.get('defaults', {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({'_brew': {}}) -%}
  {%- do users[user].update({'name': user}) -%}
  {%- set user_info = salt['user.info'](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt['user.primary_group'](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split('/')[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt['defaults.merge'](user_info, users[user], in_place=false)) -%}
{%- endfor -%}

{#- finally embed parsed user config and info in mapdata -#}
{%- do mapdata.update({'users': users.values() | list}) -%}
